package com.example.minp;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;

import android.content.Intent;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;
import android.widget.Toast;

import com.google.android.gms.tasks.OnCompleteListener;
import com.google.android.gms.tasks.Task;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.auth.FirebaseUser;
import com.google.firebase.database.DataSnapshot;
import com.google.firebase.database.DatabaseError;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;
import com.google.firebase.database.ValueEventListener;

import java.util.HashMap;


public class A223 extends AppCompatActivity {
    public Button btnac;
    public Button btndc;
String st;
    public TextView tv;
    FirebaseAuth mAuth;
    FirebaseUser muser;
    DatabaseReference muserref, reqref,frndref,  databaseReference;
    String cs="nothing";
     EditText name1,dept;
String name;


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.a223);
        //setContentView(R.layout.admin);
        btnac = findViewById(R.id.book);
        btndc = findViewById(R.id.cancelbook);
        name1 = findViewById(R.id.name1);

        dept = findViewById(R.id.dept);
        databaseReference = FirebaseDatabase.getInstance().getReference("shbs");
        final String userid = "bpmkiMHl4PTwnDvUp4ObrTtazJm1";
        muserref = FirebaseDatabase.getInstance().getReference().child("users").child(userid);
//String name="sanjay";
        reqref = FirebaseDatabase.getInstance().getReference().child("requests");
        frndref = FirebaseDatabase.getInstance().getReference().child("booked");
        mAuth = FirebaseAuth.getInstance();
        muser = mAuth.getCurrentUser();
        loaduser();
        String name = name1.getText().toString().trim();

btnac.setOnClickListener(new View.OnClickListener() {
    @Override

    public void onClick(View view) {
        performaction(userid);

     requestinfo ob1= new requestinfo(name);
     FirebaseDatabase.getInstance().getReference("requests").child(FirebaseAuth.getInstance().getCurrentUser().getUid()).setValue(ob1).addOnCompleteListener(new OnCompleteListener<Void>() {
         @Override
         public void onComplete(@NonNull Task<Void> task) {
             if (task.isSuccessful()) {
               //  Toast.makeText(A223.this, "booking added to firebase", Toast.LENGTH_SHORT).show();
             }
         }
     });
    }

});
checkuserexistance(userid);
    }

    private void loaduser() {
        muserref.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {
if(snapshot.exists()){
    name=snapshot.child("name").getValue().toString();
}
else{
    Toast.makeText(A223.this,"data not found",Toast.LENGTH_SHORT).show();
}
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
    }
    private void checkuserexistance(String userid) {
        frndref.child(muser.getUid()).child(userid).addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {
                if(snapshot.exists()){
                    cs="friend";

                }
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        frndref.child(userid).child(muser.getUid()).addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {
                if(snapshot.exists()){
                    cs="friend";
                }
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        reqref.child(muser.getUid()).child(userid).addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {
                if(snapshot.exists()){
                    if(snapshot.child("status").getValue().toString().equals("pending")){
                        cs="i_sent_pending";
                        btnac.setText("cancel booking");
                        btndc.setVisibility(View.GONE);
                    }

                        if(snapshot.child("status").getValue().toString().equals("decline")){
                            cs="i_sent_decline";
                            btnac.setText("cancel booking");
                            btndc.setVisibility(View.GONE);
                        }
                }
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        reqref.child(userid).child(muser.getUid()).addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {
                if(snapshot.exists()){
                    if(snapshot.child("status").getValue().toString().equals("pending")){

                        cs="he_sent_pending";
                        btnac.setText("accept booking");
                        btndc.setText("decline booking");
                        btndc.setVisibility(View.VISIBLE);
                    }
                }
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });


            if (cs.equals("nothing")) {
                cs = "nothing";
                btnac.setText("BOOK");
                btndc.setVisibility(View.GONE);
            }

    }



public void performaction(String userid){

        if(cs.equals("nothing")) {
            HashMap hashMap = new HashMap();
            hashMap.put("status", "pending");

            reqref.child(muser.getUid()).child(userid).updateChildren(hashMap).addOnCompleteListener(new OnCompleteListener<Void>() {
                @Override
                public void onComplete(@NonNull Task<Void> task) {
                    if (task.isSuccessful()) {
                        Toast.makeText(A223.this, "BOOKING REQUEST SENT", Toast.LENGTH_SHORT).show();
                        btndc.setVisibility(View.GONE);
                        cs = "i_sent_pending";
                        btnac.setText("cancel booking");

                    } else {
                        Toast.makeText(A223.this, "" + task.getException().toString(), Toast.LENGTH_SHORT).show();
                    }
                }
            });
        }
            if(cs.equals("i_sent_pending")||(cs.equals("i_sent_decline"))){
                reqref.child(muser.getUid()).child(userid).removeValue().addOnCompleteListener(new OnCompleteListener<Void>() {
                    @Override
                    public void onComplete(@NonNull Task<Void> task) {
                        if(task.isSuccessful()){
                            Toast.makeText(A223.this,"Cancelled booking",Toast.LENGTH_SHORT).show();
                            cs="nothing";
                            btnac.setText("book");
                            btndc.setVisibility(View.GONE);
                        }
                        else{
                            Toast.makeText(A223.this,""+task.getException().toString(),Toast.LENGTH_SHORT).show();


                        }
                    }
                });

            }
            if(cs.equals("he_sent_pending")){
                reqref.child(muser.getUid()).child(userid).removeValue().addOnCompleteListener(new OnCompleteListener<Void>() {
                    @Override
                    public void onComplete(@NonNull Task<Void> task) {
                        if(task.isSuccessful()){
                            HashMap hashMap=new HashMap();
                            hashMap.put("status","booked");
                         frndref.child(muser.getUid()).child(userid).updateChildren(hashMap).addOnCompleteListener(new OnCompleteListener() {
                             @Override
                             public void onComplete(@NonNull Task task) {
                                 if(task.isSuccessful()){
                                     frndref.child(userid).child(muser.getUid()).updateChildren(hashMap).addOnCompleteListener(new OnCompleteListener() {
                                         @Override
                                         public void onComplete(@NonNull Task task) {
                                             Toast.makeText(A223.this,"booked successfully",Toast.LENGTH_SHORT).show();
                                             cs="friend";
                                             btnac.setText(("booked"));
                                             btndc.setText(("Cancel Booking"));
                                             btndc.setVisibility(View.VISIBLE);
                                         }
                                     });
                                 }
                             }
                         });
                        }
                        if(cs.equals("friend")){
                            //
                        }
                    }
                });
            }
        }
}

import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;

import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.TextView;
import android.widget.Toast;

import com.google.android.gms.tasks.OnCompleteListener;
import com.google.android.gms.tasks.Task;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.auth.FirebaseUser;
import com.google.firebase.database.DataSnapshot;
import com.google.firebase.database.DatabaseError;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;
import com.google.firebase.database.ValueEventListener;

import java.util.HashMap;


import androidx.appcompat.app.AppCompatActivity;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;
import android.os.Bundle;
import com.firebase.ui.database.FirebaseRecyclerOptions;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;
import com.google.firebase.database.Query;

public class admin extends AppCompatActivity {


 public RecyclerView recyclerView;
    personAdapter
            adapter; // Create Object of the Adapter class
    DatabaseReference mbase; // Create object of the
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.admin);
recyclerView=findViewById(R.id.recycler1);


        // Firebase Realtime Database// Create a instance of the database and get
        // its reference
        mbase = FirebaseDatabase.getInstance().getReference().child("requests");

        recyclerView = (RecyclerView) findViewById(R.id.recycler1);

        // To display the Recycler view linearly
        recyclerView.setLayoutManager(new LinearLayoutManager(this));

        // It is a class provide by the FirebaseUI to make a
        // query in the database to fetch appropriate data
        FirebaseRecyclerOptions<person> options
                = new FirebaseRecyclerOptions.Builder<person>()
                .setQuery(mbase, person.class)
                .build();
        // Connecting object of required Adapter class to
        // the Adapter class itself
        adapter = new personAdapter(options);
        // Connecting Adapter class with the Recycler view*/
        recyclerView.setAdapter(adapter);

    }

    // Function to tell the app to start getting
    // data from database on starting of the activity
    @Override protected void onStart()
    {
        super.onStart();
        adapter.startListening();
    }

    // Function to tell the app to stop getting
    // data from database on stopping of the activity
    @Override protected void onStop()
    {
        super.onStop();
        adapter.stopListening();
    }

    }


import androidx.appcompat.app.AppCompatActivity;

import android.app.AlertDialog;
import android.app.DatePickerDialog;
import android.os.Bundle;
import android.text.Editable;
import android.text.InputType;
import android.widget.Button;
import android.content.Intent;
import android.view.View;
import android.widget.DatePicker;
import android.app.TimePickerDialog;
import android.graphics.Color;

import org.w3c.dom.Text;

import java.util.Calendar;

import android.os.Bundle;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.EditText;
import android.widget.RadioButton;
import android.widget.RadioGroup;
import android.widget.TextView;
import android.widget.TimePicker;
import android.widget.Toast;

import java.util.Calendar;

public class dashboard extends AppCompatActivity {
    private DatePickerDialog datePickerDialog;
    private Button dateButton, time, time2, search;

    public TextView tv;
    EditText number;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.dashboard);
        initDatePicker();
        dateButton = findViewById(R.id.datepickerbutton);
        // dateButton.setText(getTodaysDate());
        search = findViewById(R.id.search);
        time = findViewById(R.id.time);
        time2 = findViewById(R.id.time2);
        RadioGroup radioGroup;
        RadioGroup radioGroup1;


        String st;
        radioGroup = (RadioGroup) findViewById(R.id.radioGroup);
        radioGroup1 = (RadioGroup) findViewById(R.id.radioGroup2);
        details ob = new details();
       // tv=findViewById(R.id.textview);
//        st=getIntent().getExtras().getString("Welcome value");
      //  tv.setText(st);
        radioGroup.clearCheck();
        radioGroup1.clearCheck();
        radioGroup1.setOnCheckedChangeListener(
                new RadioGroup
                        .OnCheckedChangeListener() {
                    @Override

                    // The flow will come here when
                    // any of the radio buttons in the radioGroup
                    // has been clicked

                    // Check which radio button has been clicked

                    public void onCheckedChanged(RadioGroup group,
                                                 int checkedId) {

                        // Get the selected Radio Button
                        RadioButton radioButton = (RadioButton) group.findViewById(checkedId);
                        radioButton.getText();
                        RadioButton
                                radioButton1
                                = (RadioButton) group
                                .findViewById(checkedId);
                        radioButton.getText();
                        String a, b;
                        if (radioButton.getText().equals("upto 100")) {
                            ob.dashdetails("2","1");
                        } else if (radioButton.getText().equals("upto 200")) {
                            ob.dashdetails("1","2");
                        } else if (radioButton.getText().equals("upto 300")) {
                            ob.dashdetails("3","3");
                        }


                    }
                });

        radioGroup.setOnCheckedChangeListener(
                new RadioGroup
                        .OnCheckedChangeListener() {
                    @Override

                    // The flow will come here when
                    // any of the radio buttons in the radioGroup
                    // has been clicked

                    // Check which radio button has been clicked

                    public void onCheckedChanged(RadioGroup group,
                                                 int checkedId) {

                        // Get the selected Radio Button
                        RadioButton radioButton = (RadioButton) group.findViewById(checkedId);
                        radioButton.getText();
                        String c;
                        if (radioButton.getText().equals("A")) {
                            ob.dashdetails("1");
                        } else if (radioButton.getText().equals("B")) {
                            ob.dashdetails("2");
                        } else if (radioButton.getText().equals("C")) {
                            ob.dashdetails("3");
                        }


                    }
                });


        // perform click event listener on edit text

        time.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Calendar mcurrentTime = Calendar.getInstance();

                int hour = mcurrentTime.get(Calendar.HOUR_OF_DAY);
                int minute = mcurrentTime.get(Calendar.MINUTE);
                TimePickerDialog mTimePicker;
                mTimePicker = new TimePickerDialog(dashboard.this, new TimePickerDialog.OnTimeSetListener() {
                    @Override
                    public void onTimeSet(TimePicker timePicker, int selectedHour, int selectedMinute) {
                        String am_pm;
                        if (selectedHour >= 0 && selectedHour < 12) {
                            am_pm = "am";
                        } else {
                            am_pm = "pm";
                        }
                        time.setText(selectedHour + ":" + selectedMinute + " " + am_pm);

                    }
                }, hour, minute, true);//Yes 24 hour time
                mTimePicker.setTitle("from time");
                mTimePicker.show();

            }
        });
        time2.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Calendar mcurrentTime = Calendar.getInstance();
                int hour = mcurrentTime.get(Calendar.HOUR_OF_DAY);
                int minute = mcurrentTime.get(Calendar.MINUTE);

                TimePickerDialog mTimePicker;
                mTimePicker = new TimePickerDialog(dashboard.this, new TimePickerDialog.OnTimeSetListener() {
                    @Override
                    public void onTimeSet(TimePicker timePicker, int selectedHour, int selectedMinute) {
                        String am_pm;
                        if (selectedHour >= 0 && selectedHour < 12) {
                            am_pm = "am";
                        } else {
                            am_pm = "pm";
                        }
                        time2.setText(selectedHour + ":" + selectedMinute + " " + am_pm);
                    }
                }, hour, minute, true);//Yes 24 hour time
                mTimePicker.setTitle("to time");
                mTimePicker.show();

            }
        });

    }

    private String getTodaysDate() {
        Calendar cal = Calendar.getInstance();
        int year = cal.get(Calendar.YEAR);
        int month = cal.get(Calendar.MONTH);

        month = month + 1;
        int day = cal.get(Calendar.DAY_OF_MONTH);
        return makeDateString(day, month, year);
    }


    private void initDatePicker() {
        DatePickerDialog.OnDateSetListener dateSetListener = new DatePickerDialog.OnDateSetListener() {
            @Override
            public void onDateSet(DatePicker datePicker, int year, int month, int day) {
                month = month + 1;
                String date = makeDateString(day, month, year);
                dateButton.setText(date);
            }

        };
        Calendar cal =Calendar.getInstance();
        int year = cal.get(Calendar.YEAR);
        int month = cal.get(Calendar.MONTH);
        int day = cal.get(Calendar.DAY_OF_MONTH);
        int style = AlertDialog.THEME_HOLO_LIGHT;
        datePickerDialog = new DatePickerDialog(this, style, dateSetListener, year, month, day);
    }

    private String makeDateString(int day, int month, int year) {
        return getMonthFormat(month) + " " + day + " " + year;
    }

    private String getMonthFormat(int month) {
        if (month == 1)
            return "JAN";
        if (month == 2)
            return "FEB";
        if (month == 3)
            return "MAR";
        if (month == 4)
            return "APR";
        if (month == 5)
            return "MAY";
        if (month == 6)
            return "JUN";
        if (month == 7)
            return "JUL";
        if (month == 8)
            return "AUG";
        if (month == 9)
            return "SEPT";
        if (month == 10)
            return "OCT";
        if (month == 11)
            return "NOV";
        if (month == 12)
            return "DEC";


        return "JAN";
    }


    public void openDatePicker(View view) {
        datePickerDialog.show();
    }


    public class details {

        void dashdetails(String c) {
            search.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View view) {


                    if (c.equals("1")) {
                        Intent intent = new Intent(dashboard.this, bookingdetails.class);
                        startActivity(intent);
                    }
                    if (c.equals("2")) {
                        Intent intent = new Intent(dashboard.this, bookingdetails2.class);
                        startActivity(intent);
                    }
                    if (c.equals("3")) {
                        Intent intent = new Intent(dashboard.this, bookingdetails3.class);
                        startActivity(intent);
                    }
                }

            });
        }


        void dashdetails(String a, String b) {
            search.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View view) {


                    if (a.equals("2") && b.equals("1")) {
                        Intent intent = new Intent(dashboard.this, bookingdetails.class);
                        startActivity(intent);
                    }
                    if (a.equals("1") && b.equals("2")) {
                        Intent intent = new Intent(dashboard.this, bookingdetails2.class);
                        startActivity(intent);
                    }
                    if (a.equals("3") &&b.equals("3")) {
                        Intent intent = new Intent(dashboard.this, bookingdetails3.class);
                        startActivity(intent);

                    }


                }

            });
        }
    }
}

import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;

import android.app.DownloadManager;
import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.content.Intent;
import android.widget.TextView;
import android.widget.Toast;

import com.firebase.ui.database.FirebaseRecyclerAdapter;
import com.google.android.gms.tasks.OnCompleteListener;
import com.google.android.gms.tasks.Task;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.auth.FirebaseUser;
import com.google.firebase.database.DataSnapshot;
import com.google.firebase.database.DatabaseError;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;
import com.google.firebase.database.ValueEventListener;

import java.util.HashMap;


import androidx.appcompat.app.AppCompatActivity;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;
import android.os.Bundle;
import com.firebase.ui.database.FirebaseRecyclerOptions;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;
import com.google.firebase.database.Query;

public class findfriend extends AppCompatActivity {

FirebaseRecyclerOptions<person>options;
FirebaseRecyclerAdapter<person,FindFriendViewHolder>adapter;
    private RecyclerView recyclerView;
 // Create Object of the Adapter class
    DatabaseReference muserref;
    FirebaseAuth mauth;
    FirebaseUser muser;

    @Override
    protected void onCreate(Bundle savedInstanceState) {

        super.onCreate(savedInstanceState);
        setContentView(R.layout.admin);
        recyclerView=findViewById(R.id.recycler1);
        recyclerView.setLayoutManager(new LinearLayoutManager(this));
        muserref=FirebaseDatabase.getInstance().getReference().child("requests");
        loadusers("");
    }

    private void loadusers(String s) {
Query query=muserref.orderByChild("name").startAt(s).endAt(s+"\uf8ff");
options =new FirebaseRecyclerOptions.Builder<person>().setQuery(query,person.class).build();
adapter=new FirebaseRecyclerAdapter<person, FindFriendViewHolder>(options) {
    @Override
    protected void onBindViewHolder(@NonNull FindFriendViewHolder holder, int position, @NonNull person model) {
        holder.name.setText(model.getName());
        holder.itemView.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                Intent intent=new Intent(findfriend.this,viewfriend.class);
                intent.putExtra("userkey",getRef(holder.getAdapterPosition()).getKey().toString());
                startActivity(intent);
            }
        });
    }

    @NonNull
    @Override
    public FindFriendViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
        View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.person,parent,false);

        return new FindFriendViewHolder(view);
    }
};
adapter.startListening();
recyclerView.setAdapter(adapter);
    }

}

